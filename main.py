import os
import shutil
from aiogram import Bot, types, Dispatcher, executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from utils import UserStates
import aioschedule
import asyncio
import mariadb
from deepface import DeepFace

TOKEN = ''
PHOTO_DIR = "\\\\192.168.100.144\\surveillance\\@Snapshot\\"
NEW_DIR = "C:\\PhotoRepos\\"
Neraspr_dir = "C:\\NerasprDir\\"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
conn = mariadb.connect(user="anton",
                       password="2Azxcvbnm",
                       host="192.168.2.2",
                       port=3307,
                       database="bot_hr")
cur = conn.cursor()


async def main_work():
    print("Okay lets go")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if not os.path.exists(PHOTO_DIR):
        print("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return

    for root, dirs, files in os.walk(PHOTO_DIR):
        for file in files:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –≥–¥–µ –Ω–µ—Ç –ª–∏—Ü
            try:
                embedding = DeepFace.represent(img_path=PHOTO_DIR + file)

                for root, dirs, files in os.walk(NEW_DIR):
                    for dir in dirs:
                        # –ë–µ—Ä–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–æ—Ä—è–¥–∫—É –∏ –ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –ø–∞–ø–∫–∞–º —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º –Ω–∞–º –ª—é–¥—è–º
                        df = DeepFace.find(img_path=PHOTO_DIR + file, db_path=NEW_DIR + dir, model_name="Facenet")
                        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ —Ñ–æ—Ç–æ
                        if len(df.values.tolist()) > 0:
                            # –ï—Å–ª–∏ –≤ –ø–∞–ø–∫–µ –≤—Å–µ–≥–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ
                            if len([f for f in os.listdir(NEW_DIR + dir) if
                                    os.path.isfile(os.path.join(NEW_DIR + dir, f))]) == 1:
                                newname = dir + '!' + file
                                os.rename(PHOTO_DIR + file, PHOTO_DIR + newname)
                                shutil.move(PHOTO_DIR + newname, Neraspr_dir)
                                break
                            # –ï—Å–ª–∏ –ø–æ–ª–æ–≤–∏–Ω–∞ –∏–ª–∏ –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–æ—Ç–æ —Ç—É–¥–∞
                            elif len(df.values.tolist()) >= len([f for f in os.listdir(NEW_DIR + dir) if
                                                                 os.path.isfile(os.path.join(NEW_DIR + dir, f))]) / 2:
                                datetime = file[9:17] + file[18:24]
                                newname = dir + '!' + file
                                os.rename(PHOTO_DIR + file, PHOTO_DIR + newname)
                                shutil.move(PHOTO_DIR + newname, Neraspr_dir)
                                cur.execute("Insert into Fotos (ID, Time, Worker) values (?, ?, ?)", (newname, datetime, dir))
                                conn.commit()
                                break
                shutil.move(PHOTO_DIR + file, Neraspr_dir)
            except Exception as err:
                print(err)
                os.remove(PHOTO_DIR + file)


#–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@dp.message_handler(commands=['raspr'], state='*')
async def raspr_photos(message: types.Message):
    for root, dirs, files in os.walk(Neraspr_dir):
        if not files:
            await bot.send_message(message.from_user.id, "–ù–µ—Ç –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            break
        for file in files:
            state = dp.current_state(user=message.from_user.id)
            await state.set_state(UserStates.all()[0])
            await bot.send_message(message.from_user.id, text=f"–í—Å–µ–≥–æ {len(files)}")
            button = InlineKeyboardButton('–ü—Ä–∞–≤–∏–ª—å–Ω–æ',
                                          callback_data=file)
            button1 = InlineKeyboardButton('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', callback_data='photo_not_right')
            kb = InlineKeyboardMarkup().add(button).add(button1)
            await bot.send_photo(message.from_user.id, photo=open(Neraspr_dir + file, 'rb'))
            await bot.send_message(message.from_user.id, text=file,
                                   reply_markup=kb)
            break


#–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@dp.callback_query_handler(lambda c: c.data == 'raspr_photo_next', state='*')
async def raspr_photos_next(query: types.CallbackQuery):
    for root, dirs, files in os.walk(Neraspr_dir):
        if not files:
            await bot.send_message(query.message.chat.id, "–ù–µ—Ç –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
            break
        for file in files:
            await bot.send_message(query.message.chat.id, text=f"–í—Å–µ–≥–æ {len(files)}")
            button = InlineKeyboardButton('–ü—Ä–∞–≤–∏–ª—å–Ω–æ',
                                          callback_data='photo_right')
            button1 = InlineKeyboardButton('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', callback_data='photo_not_right')
            kb = InlineKeyboardMarkup().add(button).add(button1)
            await bot.send_photo(query.message.chat.id, photo=open(Neraspr_dir + file, 'rb'))
            await bot.send_message(query.message.chat.id, text=file,
                                   reply_markup=kb)
            break

# -----–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'], state='*')
async def start_command(message: types.Message):
    button = InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏', callback_data='add_user_admin_list_button')
    button1 = InlineKeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='/settings')
    button2 = InlineKeyboardButton('–ö—Ç–æ –≤–æ —Å–∫–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏—à–µ–ª', callback_data='today_come_time_list')
    kb = InlineKeyboardMarkup().add(button).add(button1).add(button2)
    print(message.from_user.id)
    await bot.send_message(message.from_user.id,
                           "–ë–æ—Ç –∫—Ä—ã—Å–∞ –Ω–∞ —Å–≤—è–∑–∏ üêÄ\n–£—á—É—Å—å –ø–∞–ª–∏—Ç—å –≤—Å–µ—Ö, –∫—Ç–æ –≤–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–¥–µ—Ç.\n–ï—â–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é —ç—Ç–æ",
                           reply_markup=kb)


# -----–î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query_handler(lambda c: c.data == 'add_user_admin_list_button', state='*')
async def add_user_admin_list_command(query: types.CallbackQuery):
    try:
        cur.execute("select * from admins where id=?", (query.message.chat.id,))
        #–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        if cur.fetchone() == None:
            cur.execute("insert into admins (id, notifications) values (?, ?)", (query.message.chat.id, 0))
            conn.commit()
            #–ò–∑–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            button2 = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏', callback_data='add_user_admin_list_button')
            button3 = InlineKeyboardButton('–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='admin_notification')
            kb2 = InlineKeyboardMarkup().add(button2).add(button3)
            await query.message.edit_text(reply_markup=kb2, text="–î–æ–±–∞–≤–∏–ª –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã. –í–∫–ª—é—á–∏—Ç—å?")
        else:
            cur.execute("delete from admins where id=?", (query.message.chat.id,))
            conn.commit()
            button = InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏', callback_data='add_user_admin_list_button')
            kb = InlineKeyboardMarkup().add(button)
            await query.message.edit_text(reply_markup=kb, text="–£–¥–∞–ª–∏–ª –≤–∞—Å –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")
    except Exception as err:
        print(err)
        await bot.send_message(query.message.chat.id,
                               "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


#–í–∫–ª—é—á–∞–µ–º –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == 'admin_notification', state='*')
async def admin_notification_command(query: types.CallbackQuery):
    try:
        cur.execute("select * from admins where id=?", (query.message.chat.id,))
        button = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏', callback_data='add_user_admin_list_button')
        kb = InlineKeyboardMarkup()
        if cur.fetchone()[0] == 1:
            cur.execute("update admins set notifications = 0 where id=?", (query.message.chat.id,))
            conn.commit()
            button2 = InlineKeyboardButton('–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='admin_notification')
        else:
            cur.execute("update admins set notifications = 1 where id=?", (query.message.chat.id,))
            conn.commit()
            button2 = InlineKeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='admin_notification')
        kb.add(button).add(button2)
        await query.message.edit_text(reply_markup=kb, text="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å")
    except Exception as err:
        print(err)
        await bot.send_message(query.message.chat.id,
                               "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


#–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
@dp.message_handler(commands=['settings'], state='*')
async def settings_command(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    await state.reset_state()
    try:
        cur.execute("select * from admins where id=?", (message.from_user.id,))
        kb = InlineKeyboardMarkup()
        button = InlineKeyboardButton('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏–µ', callback_data='start_function')
        kb.add(button)
        data = cur.fetchone()
        #–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        if data == None:
            button = InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–∫–∏', callback_data='add_user_admin_list_button')
            kb.add(button)
        else:
            button = InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏', callback_data='add_user_admin_list_button')
            kb.add(button)
            if data[0] == 1:
                button2 = InlineKeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='admin_notification')
                kb.add(button2)
            else:
                button2 = InlineKeyboardButton('–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='admin_notification')
                kb.add(button2)
        await bot.send_message(message.from_user.id,
                               "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å",
                               reply_markup=kb)
    except Exception as err:
        print(err)
        await bot.send_message(message.from_user.id,
                               "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


@dp.callback_query_handler(lambda c: c.data == 'test', state='*')
async def button_right_command(query: types.CallbackQuery):
    cur.execute("select * from admins where notifications=1")
    for i in cur:
        button = InlineKeyboardButton('–ü—Ä–∞–≤–∏–ª—å–Ω–æ',
                                      callback_data='photo_right')
        button1 = InlineKeyboardButton('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', callback_data='photo_not_right')
        kb = InlineKeyboardMarkup().add(button).add(button1)
        await bot.send_message(i[1], text="file!dirrection",
                               reply_markup=kb)


#–ö–Ω–æ–ø–∫–∞ –∫–æ–≥–¥–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
@dp.callback_query_handler(lambda c: c.data == 'photo_right', state='*')
async def button_right_command(query: types.CallbackQuery):
    dirr = query.message.text.split('!')[0]
    shutil.move(Neraspr_dir + query.message.text, NEW_DIR + dirr)
    state = dp.current_state(user=query.from_user.id)
    button = InlineKeyboardButton('–î–∞–ª—å—à–µ', callback_data='raspr_photo_next')
    kb = InlineKeyboardMarkup().add(button)
    await state.reset_state()
    await query.message.edit_text(text="–°–ø–∞—Å–∏–±–æ! –ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª –≤ –ø–∞–ø–∫—É", reply_markup=kb)


#–ö–Ω–æ–ø–∫–∞ –∫–æ–≥–¥–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
@dp.callback_query_handler(lambda c: c.data == 'photo_not_right', state='*')
async def button_not_right_command(query: types.CallbackQuery):
    state = dp.current_state(user=query.from_user.id)
    kb = InlineKeyboardMarkup()
    for root, dirs, files in os.walk(NEW_DIR):
        for dir in dirs:
            button = InlineKeyboardButton(text=dir, callback_data=query.message.text)
            kb.add(button)
    await state.set_state(UserStates.all()[0])
    await query.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ç–æ:", reply_markup=kb)


@dp.callback_query_handler(state=UserStates.USER_STATE_0)
async def choose_right(query: types.CallbackQuery):
    dirr = query.data.split('!')[0]
    shutil.move(Neraspr_dir + query.data, NEW_DIR + dirr)
    state = dp.current_state(user=query.from_user.id)
    button = InlineKeyboardButton('–î–∞–ª—å—à–µ', callback_data='raspr_photo_next')
    kb = InlineKeyboardMarkup().add(button)
    await state.reset_state()
    await query.message.edit_text(text="–°–ø–∞—Å–∏–±–æ! –ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª –≤ –ø–∞–ø–∫—É", reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == 'start_function', state='*')
async def start_command(query: types.CallbackQuery):
    await bot.send_message(query.message.chat.id,
                           "–ù–∞—á–∞—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã")
    await main_work()


async def noon_print():
    cur.execute("select * from admins where notifications=1")
    for i in cur:
        await bot.send_message(i[1], "123")


async def scheduler():

    aioschedule.every(30).minutes.do(main_work)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


async def on_startup(dispatcher):
    asyncio.create_task(scheduler())


if __name__ == '__main__':
    executor.start_polling(dispatcher=dp, skip_updates=True, on_startup=on_startup)
    #executor.start_polling(dispatcher=dp, skip_updates=True)
